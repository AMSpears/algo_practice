{"id":"algos/easyAlgos/ValidSubsequence.js","dependencies":[{"name":"/Users/aspears/personal/problems/.babelrc","includedInParent":true,"mtime":1601411992482},{"name":"/Users/aspears/personal/problems/package.json","includedInParent":true,"mtime":1601411854621}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validSubsequence = void 0;\n\n// VALIDATE SUBSEQUENCE\n\n/*\nGiven two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.\n\nA subsequence of an array is a set of numbers that aren't necessarily adjancet in the array but that are in the same order as they appear in the array. For instance, the numbers [1,2,4] form a subsequence of the array [1,2,3,4], and so do the numbers [2, 4]. Note that a single number in an array and the array itself are both valid subsequences of the array.\n\nSample input:\narray = [5,1,22,25,6,-1,8,10]\nsequence = [1,6,-1,10]\n\nSample output:\ntrue\n*/\n// SOLUTION\nconst validSubsequence = (array, sequence) => {\n  let arrIdx = 0;\n  let seqIdx = 0;\n\n  while (arrIdx < array.length && seqIdx < sequence.length) {\n    if (array[arrIdx] === sequence[seqIdx]) {\n      seqIdx++;\n    }\n\n    arrIdx++;\n  }\n\n  return seqIdx === sequence.length;\n};\n\nexports.validSubsequence = validSubsequence;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":3,"column":0}},{"generated":{"line":22,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":7}},{"name":"validSubsequence","generated":{"line":23,"column":6},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":13}},{"generated":{"line":23,"column":22},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":29}},{"generated":{"line":23,"column":25},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":32}},{"name":"array","generated":{"line":23,"column":26},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":33}},{"generated":{"line":23,"column":31},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":32}},{"name":"sequence","generated":{"line":23,"column":33},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":40}},{"generated":{"line":23,"column":41},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":32}},{"generated":{"line":23,"column":46},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":53}},{"generated":{"line":24,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":18,"column":2}},{"name":"arrIdx","generated":{"line":24,"column":6},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":18,"column":6}},{"generated":{"line":24,"column":12},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":18,"column":12}},{"generated":{"line":24,"column":15},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":18,"column":15}},{"generated":{"line":24,"column":16},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":18,"column":2}},{"generated":{"line":25,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":19,"column":2}},{"name":"seqIdx","generated":{"line":25,"column":6},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":19,"column":6}},{"generated":{"line":25,"column":12},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":19,"column":12}},{"generated":{"line":25,"column":15},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":19,"column":15}},{"generated":{"line":25,"column":16},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":19,"column":2}},{"generated":{"line":27,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":2}},{"name":"arrIdx","generated":{"line":27,"column":9},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":9}},{"generated":{"line":27,"column":15},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":15}},{"name":"array","generated":{"line":27,"column":18},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":18}},{"generated":{"line":27,"column":23},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":23}},{"name":"length","generated":{"line":27,"column":24},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":24}},{"generated":{"line":27,"column":30},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":9}},{"name":"seqIdx","generated":{"line":27,"column":34},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":34}},{"generated":{"line":27,"column":40},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":40}},{"name":"sequence","generated":{"line":27,"column":43},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":43}},{"generated":{"line":27,"column":51},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":51}},{"name":"length","generated":{"line":27,"column":52},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":52}},{"generated":{"line":27,"column":58},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":2}},{"generated":{"line":27,"column":60},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":21,"column":60}},{"generated":{"line":28,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":4}},{"name":"array","generated":{"line":28,"column":8},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":8}},{"generated":{"line":28,"column":13},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":13}},{"name":"arrIdx","generated":{"line":28,"column":14},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":14}},{"generated":{"line":28,"column":20},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":13}},{"generated":{"line":28,"column":21},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":8}},{"name":"sequence","generated":{"line":28,"column":26},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":26}},{"generated":{"line":28,"column":34},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":34}},{"name":"seqIdx","generated":{"line":28,"column":35},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":35}},{"generated":{"line":28,"column":41},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":34}},{"generated":{"line":28,"column":42},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":4}},{"generated":{"line":28,"column":44},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":22,"column":44}},{"name":"seqIdx","generated":{"line":29,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":23,"column":6}},{"name":"seqIdx","generated":{"line":29,"column":6},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":23,"column":6}},{"generated":{"line":29,"column":12},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":23,"column":12}},{"generated":{"line":30,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":24,"column":5}},{"name":"arrIdx","generated":{"line":32,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":25,"column":4}},{"name":"arrIdx","generated":{"line":32,"column":4},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":25,"column":4}},{"generated":{"line":32,"column":10},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":25,"column":10}},{"generated":{"line":33,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":26,"column":3}},{"generated":{"line":35,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":2}},{"name":"seqIdx","generated":{"line":35,"column":9},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":9}},{"generated":{"line":35,"column":15},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":15}},{"name":"sequence","generated":{"line":35,"column":20},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":20}},{"generated":{"line":35,"column":28},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":28}},{"name":"length","generated":{"line":35,"column":29},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":29}},{"generated":{"line":35,"column":35},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":28,"column":2}},{"generated":{"line":36,"column":0},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":29,"column":1}},{"generated":{"line":36,"column":1},"source":"algos/easyAlgos/ValidSubsequence.js","original":{"line":17,"column":7}}],"sources":{"algos/easyAlgos/ValidSubsequence.js":"// VALIDATE SUBSEQUENCE\n\n/*\nGiven two non-empty arrays of integers, write a function that determines whether the second array is a subsequence of the first one.\n\nA subsequence of an array is a set of numbers that aren't necessarily adjancet in the array but that are in the same order as they appear in the array. For instance, the numbers [1,2,4] form a subsequence of the array [1,2,3,4], and so do the numbers [2, 4]. Note that a single number in an array and the array itself are both valid subsequences of the array.\n\nSample input:\narray = [5,1,22,25,6,-1,8,10]\nsequence = [1,6,-1,10]\n\nSample output:\ntrue\n*/\n\n// SOLUTION\nexport const validSubsequence = (array, sequence) => {\n  let arrIdx = 0\n  let seqIdx = 0\n\n  while (arrIdx < array.length && seqIdx < sequence.length) {\n    if (array[arrIdx] === sequence[seqIdx]) {\n      seqIdx++\n    }\n    arrIdx++\n  }\n\n  return seqIdx === sequence.length\n}\n\n\n"},"lineCount":null}},"error":null,"hash":"6bef413b1da702c2a657360d0b96c097","cacheData":{"env":{}}}